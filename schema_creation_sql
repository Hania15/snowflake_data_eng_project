use role accountadmin;
use warehouse compute_wh;

-- lets create a db called cricket and 4 schemas
create database if not exists cricket;
create or replace schema cricket.land;
create or replace schema cricket.raw;
create or replace schema cricket.clean;
create or replace schema cricket.consumption;


show schemas in database cricket;

-- change context
use schema cricket.land;

create or replace file format cricket.land.my_json_format
    type = json
    null_if = ('\\n','null','')
    strip_outer_array = true
    comment = 'Json File Format with outer strip array flag true';

create or replace stage _my_stg;

list @cricket.land_my_stage;

-- quick check if data is coming correctly or not
select 
        t.$1:meta::variant as meta, 
        t.$1:info::variant as info, 
        t.$1:innings::array as innings, 
        metadata$filename as file_name,
        metadata$file_row_number int,
        metadata$file_content_key text,
        metadata$file_last_modified stg_modified_ts
     from  @my_stg/cricket/json/1000855.json.gz (file_format => 'my_json_format') t;

create or replace transient table cricket.raw.match_raw_tbl (
    meta object not null,
    info variant not null,
    innings ARRAY not null,
    stg_file_name text not null,
    stg_file_row_number int not null,
    stg_file_hashkey text not null,
    stg_modified_ts timestamp not null
)
comment = 'This is raw table to store all the json data file with root elements extracted'
;

copy into cricket.raw.match_raw_tbl from 
    (
    select 
        t.$1:meta::object as meta, 
        t.$1:info::variant as info, 
        t.$1:innings::array as innings, 
        --
        metadata$filename,
        metadata$file_row_number,
        metadata$file_content_key,
        metadata$file_last_modified
    from @cricket.land.my_stg/cricket/json (file_format => 'cricket.land.my_json_format') t
    )
    on_error = continue;

select count(*) from cricket.raw.match_raw_tbl; 

select * from cricket.raw.match_raw_tbl limit 10;
